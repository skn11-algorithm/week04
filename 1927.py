import sys
import heapq    # 최소 힙 기반 모듈
input = sys.stdin.readline
n = int(input())
lst = []
for _ in range(n):
    k = int(input())
    if k == 0:
        if len(lst) == 0:
            print(0)
        else:
            print(heapq.heappop(lst))
    else:            
        heapq.heappush(lst, k)
    # lst.append(k)

# 주요 함수
# heappush(heap, item): 힙에 item을 추가합니다. 힙 불변성을 유지하면서 추가합니다.
# heappop(heap): 힙에서 가장 작은 항목을 제거하고 반환합니다. 힙이 비어 있으면 IndexError가 발생합니다.
# heapify(x): 리스트 x를 제자리에서 힙으로 변환합니다. 이는 선형 시간 내에 수행됩니다.
# heapreplace(heap, item): 힙에서 가장 작은 항목을 제거하고 item을 추가합니다. 힙의 크기는 변하지 않습니다.
# heappushpop(heap, item): item을 힙에 추가한 후, 가장 작은 항목을 제거하고 반환합니다. 이는 heappush와 heappop을 따로 호출하는 것보다 효율적입니다.


# 최소 힙(Min Heap)은 힙 자료구조의 한 종류로, 모든 노드의 키가 그 노드의 자식 노드들의 키보다 작거나 같은 특성을 가진다. 이는 루트 노드가 항상 최소값을 가지며, 이는 효율적인 최소값 접근과 삽입/삭제 연산을 가능하게 한다.
# 최소 힙의 특성
# 부모 노드가 자식 노드보다 작다: 모든 노드의 키가 그 자식 노드들의 키보다 작거나 같다.
# 루트 노드가 최소값: 힙의 루트 노드는 항상 최소값을 가진다.
# 완전 이진 트리: 힙은 완전 이진 트리 구조를 가지며, 이는 노드가 왼쪽에서 오른쪽으로 채워지는 방식이다.
# 최소 힙의 연산
# 삽입: 새로운 요소를 힙에 추가할 때, 힙의 마지막에 추가한 후 부모 노드와 비교하여 힙 속성을 유지하기 위해 필요한 위치로 이동시킨다.
# 삭제: 루트 노드를 제거하고, 힙의 마지막 요소를 루트로 이동시킨 후 자식 노드와 비교하여 힙 속성을 유지하기 위해 필요한 위치로 이동시킨다.
# 최소 힙의 장점
# 효율적인 최소값 접근: 루트 노드가 항상 최소값이므로, O(1)의 시간 복잡도로 최소값에 접근할 수 있다.
# 효율적인 삽입 및 삭제: 삽입과 삭제 연산이 O(log n)의 시간 복잡도를 가지므로, 대량의 데이터 처리에 적합하다.
# 파이썬에서 최소 힙 구현
# 파이썬의 heapq 모듈은 기본적으로 최소 힙을 구현하고 있습니다. 따라서 heapq 모듈을 사용하여 쉽게 최소 힙을 구현할 수 있습니다.